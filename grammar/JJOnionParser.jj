/* ************************************************************** *
*                                                                *
* Copyright (c) 2016-, Kota Mizushima, All rights reserved.  *
*                                                                *
*                                                                *
* This software is distributed under the modified BSD License.   *
* ************************************************************** */
options {
  STATIC = false;
}

PARSER_BEGIN(JJOnionParser)
package onion.compiler.parser;
import onion.compiler.AST;
import onion.compiler.Location;
import onion.compiler.Parser;
import onion.compiler.toolbox.*;
import scala.Tuple2;
import scala.collection.immutable.*;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.Buffer;
import scala.Option;
import scala.Option$;
import static onion.compiler.AST.append;
import java.util.Stack;

@SuppressWarnings("unchecked")
public class JJOnionParser implements Parser {
  private int mset; // used for semantic lookahead

  private boolean no(int m, int mset) {
    return (m & mset) == 0;
  }

  private boolean la(String s) {
    Token t = getToken(1);
    return t != null && t.image.equals(s);
  }

  private <T> Option<T> option(T value) {
    return Option$.MODULE$.apply(value);
  }

  /*
   * workaround for Scala types being used from Java
   */
  private static <A> List<A> toList(Buffer<A> buffer) {
    return (List<A>)buffer.toList();
  }

  /*
   * workaround for Scala types being used from Java
   */
  private static <A> List<A> asList(A element) {
    ArrayBuffer<A> buffer = new ArrayBuffer<A>();
    append(buffer, element);
    return (List<A>)buffer.toList();
  }

  /*
   * convenience method to create a Location
   */
  private static Location p(Token t) {
    return new Location(t.beginLine, t.beginColumn);
  }

  /*
   * convenience method to create a Location
   */
  private static Location p(int line, int column) {
    return new Location(line, column);
  }

  /*
   * convenience method to get image of a Token
   */
  private static String c(Token t) {
    return t.image;
  }

  /*
   * converience method to create substring
   */
  private static String sub(String s, int sindex, int eindex) {
    return s.substring(sindex, eindex);
  }

  /*
   * Returns a String which last character of s is omitted.
   */
  private static String chop(String s) {
    return s.substring(0, s.length() - 1);
  }

  /*
   * Returns a String which first and last character of s is omitted.
   */
  private static String chopEdge(String s) {
    return s.substring(1, s.length() - 1);
  }

  private static char unescapeChar(char c) {
    switch(c){
    case 'n' : return '\n';
    case 't' : return '\t';
    case 'b' : return '\b';
    case 'r' : return '\r';
    case 'f' : return '\f';
    case '\\': return '\\';
    case '\'': return '\'';
    case '"' : return '"';
    default  : return c;
    }
  }

  private static String unescape(String s) {
    StringBuffer b = new StringBuffer();
    int len = s.length();
    for(int i = 0; i < len; i++){
      char c = s.charAt(i);
      if(c != '\\'){
        b.append(c);
        continue;
      }
      i++;
      b.append(unescapeChar(s.charAt(i)));
    }
    return new String(b);
  }

  private Stack<Integer> states = new Stack<Integer>();

  private void enterState(int state) {
    int oldState = token_source.curLexState;
    states.push(oldState);
    token_source.SwitchTo(state);
  }

  private void leaveState() {
    token_source.SwitchTo(states.pop());
  }

  private void enterDefault() {
    enterState(DEFAULT);
  }

  private void leaveDefault() {
    leaveState();
  }

  private void enterSection() {
    enterState(IN_STATEMENT);
  }

  private void leaveSection() {
    leaveState();
  }

  private AST.Expression parseInterpolatedString(Location loc, String str) {
    // Remove quotes
    str = str.substring(1, str.length() - 1);
    
    ArrayBuffer<String> parts = new ArrayBuffer<String>();
    ArrayBuffer<AST.Expression> expressions = new ArrayBuffer<AST.Expression>();
    
    int start = 0;
    int pos = 0;
    
    while (pos < str.length()) {
      int interpStart = str.indexOf("#{", pos);
      if (interpStart == -1) {
        // No more interpolations
        append(parts, unescape(str.substring(start)));
        break;
      }
      
      // Add the string part before interpolation
      append(parts, unescape(str.substring(start, interpStart)));
      
      // Find the closing brace
      int braceCount = 1;
      int interpEnd = interpStart + 2;
      while (interpEnd < str.length() && braceCount > 0) {
        char c = str.charAt(interpEnd);
        if (c == '{') braceCount++;
        else if (c == '}') braceCount--;
        interpEnd++;
      }
      
      if (braceCount > 0) {
        throw new RuntimeException("Unclosed interpolation in string at " + loc);
      }
      
      // Parse the expression inside
      String exprStr = str.substring(interpStart + 2, interpEnd - 1);
      JJOnionParser exprParser = new JJOnionParser(new java.io.StringReader(exprStr));
      try {
        AST.Expression expr = exprParser.term();
        append(expressions, expr);
      } catch (Exception e) {
        throw new RuntimeException("Invalid expression in string interpolation: " + exprStr + " at " + loc, e);
      }
      
      start = interpEnd;
      pos = interpEnd;
    }
    
    // If we ended with an expression, add an empty string part
    if (parts.size() == expressions.size()) {
      append(parts, "");
    }
    
    return new AST.StringInterpolation(loc, toList(parts), toList(expressions));
  }
}
PARSER_END(JJOnionParser)

<DEFAULT> SKIP:
{
  "\r\n"
| "\t"
| "\f"
| "\r"
| "\n"
| " "
}

<IN_STATEMENT> SKIP:
{
  " "
| "\t"
| "\f"
}

<IN_STATEMENT> TOKEN:
{
  <EOL: ("\r\n" | "\r" | "\n")>
}

/*
* COMMENTS
*/
<DEFAULT, IN_STATEMENT>
SPECIAL_TOKEN:
{
  <MULTI_LINE_COMMENT: "/*" (~["*"])*  "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
| <LINE_COMMENT:       "//" (~["\r", "\n"])*>
| <SHELL_COMMENT:      "#!" (~["\r", "\n"])*>
}

/*
* KEYWORDS
*/
<DEFAULT, IN_STATEMENT>
TOKEN:
{
  <K_ABSTRACT:     "abstract"     >
| <K_AND:          "and"          >
| <K_BOOLEAN:      "Boolean" >
| <K_BREAK:        "break"        >
| <K_BYTE:         "Byte" >
| <K_CASE:         "case"         >
| <K_CHAR:         "Char"  >
| <K_CLASS:        "class"        >
| <K_RECORD:       "record"       >
| <K_CONST:        "const"        >
| <K_CONTINUE:     "continue"    >
| <K_DEF:          "def"          >
| <K_DOUBLE:       "Double"      >
| <K_ELSE:         "else"         >
| <K_FALSE:        "false"        >
| <K_FINALLY:      "finally"      >
| <K_FINAL:        "final"        >
| <K_FLOAT:        "Float" >
| <K_FOR:          "for"          >
| <K_FOREACH:      "foreach"      >
| <K_FORWARD:      "forward"      >
| <K_GOTO:         "goto"         >
| <K_IF:           "if"           >
| <K_IMPORT:       "import"       >
| <K_INT:          "Int"  >
| <K_INTERFACE:    "interface"    >
| <K_INTERNAL:     "internal"     >
| <K_IS:           "is"           >
| <K_LONG:         "Long"         >
| <K_MODULE:       "module"       >
| <K_NEW:          "new"          >
| <K_THIS:         "this"         >
| <K_NULL:         "null"         >
| <K_OR:           "or"           >
| <K_OVERRIDE:     "override"     >
| <K_PRIVATE:      "private"      >
| <K_PROTECTED:    "protected"    >
| <K_PUBLIC:       "public"       >
| <K_CATCH:        "catch"        >
| <K_RETURN:       "return"       >
| <K_SELECT:       "select"       >
| <K_SELF:         "self"         >
| <K_SHORT:        "Short"        >
| <K_STATIC:       "static"       >
| <K_SUPER:        "super"        >
| <K_SYNCHRONIZED: "synchronized" >
| <K_THROW:        "throw"        >
| <K_THROWS:       "throws"       >
| <K_TRUE:         "true"         >
| <K_TRY:          "try"          >
| <K_VAR:          "var"          >
| <K_VOID:         "void" | "Unit" >
| <K_VOLATILE:     "volatile"     >
| <K_WHEN:         "when"         >
| <K_WHILE:        "while"        >
}


/*
* OPERATORS
*/
<DEFAULT, IN_STATEMENT>
TOKEN : {
  <PLUS:           "+"            >
| <MINUS:          "-"            >
| <STAR:           "*"            >
| <SLASH:          "/"            >
| <PERC:           "%"            >
| <DOLLAR:         "$"            >
| <LT:             "<"            >
| <GT:             ">"            >
| <ARROW:          "->"           >
| <ARROW2:         "=>"           >
| <SUBTYPE:        "<:"           >
| <NOT:            "!"            >
| <AMP:            "&"            >
| <AND:            "&&"           >
| <BAR:            "|"            >
| <OR:             "||"           >
| <EOR:            "^"            >
| <BN:             "~"            >
| <L2S:            "<<"           >
| <R2S:            ">>"           >
| <R3S:            ">>>"          >
| <ASSIGN:         "="            >
| <EQ:             "=="           >
| <NOTEQ:          "!="           >
| <REFEQ:          "==="          >
| <REFNOTEQ:       "!=="          >
| <ADDEQ:          "+="           >
| <SUBEQ:          "-="           >
| <MULEQ:          "*="           >
| <DIVEQ:          "/="           >
| <MODEQ:          "%="           >
| <PLUSPLUS:       "++"           >
| <MINUSMINUS:     "--"           >
| <COLON:          ":"            >
| <SEMI:           ";"            >
| <COLON2:         "::"           >
| <SHARP:          "#"            >
| <DOT:            "."            >
| <LBRACE:         "{"            >
| <RBRACE:         "}"            >
| <BACK_QUOTE:     "`"            >
| <LPAREN:         "("            >
| <RPAREN:         ")"            >
| <COMMA:          ","            >
| <LBRACKET:       "["            >
| <RBRACKET:       "]"            >
| <QUESTION:       "?"            >
| <ELVIS:          "?:"           >
}

/*
 * LITERALS
 */
<DEFAULT, IN_STATEMENT>
TOKEN:
{
  <INTEGER:
    <DECIMAL_LITERAL> (["L"])?
  | <HEX_LITERAL> (["L"])?
  | <OCTAL_LITERAL> (["L"])?
  >
| <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| <#OCTAL_LITERAL: "0" (["0"-"7"])* >
| <FLOAT:
    (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["F", "D"])?
  | "." (["0"-"9"])+ (<EXPONENT>)? (["F","D"])?
  | (["0"-"9"])+ <EXPONENT> (["F","D"])?
  | (["0"-"9"])+ (<EXPONENT>)? ["F","D"]
  >
| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| <CHARACTER:
    "'"
    ( (~["'","\\","\n","\r"])
    | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )
    "'"
  >
| <STRING:
    "\""
    ( (~["\"","\\","\n","\r"])
    | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )*
    "\""
  >
| <ID:       ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])* >
| <FQCN:     "#" "<" <ID> ("." <ID>)* ">"                                >
| <FID:      "@" <ID>                                                    >
}

/*
 * ERROR TOKEN
 */
<DEFAULT, IN_STATEMENT>
TOKEN:{
  <ERROR: ~[]>
}

AST.CompilationUnit unit() :{
  AST.ModuleDeclaration module = null; AST.ImportClause imports = null;
  AST.Toplevel top = null;  ArrayBuffer<AST.Toplevel> tops = new ArrayBuffer<AST.Toplevel>();
}{
  [module=module_decl()]
  [imports=import_decl()]
  (top=top_level() {append(tops, top);})+ <EOF> {
    return new AST.CompilationUnit(p(1, 1),  null, module, imports, toList(tops));
  }
}

AST.ModuleDeclaration module_decl() :{Token t1, t2; StringBuffer sb = new StringBuffer();}{
  {enterSection();}
  t1="module" t2=<ID> {sb.append(t2.image);} ("." t2=<ID> {sb.append(t2.image);})* eos() {
    return new AST.ModuleDeclaration(p(t1), new String(sb));
  }
}

AST.ImportClause import_decl() :{
  Token t = null, n;
  StringBuffer sb;
  String s = null;
  ArrayBuffer<Tuple2<String, String>> imports = new ArrayBuffer<Tuple2<String, String>>();
}{
  t="import" "{"
    ( {sb = new StringBuffer();enterSection();}
      ( LOOKAHEAD(2)
        (n=<ID> {s = n.image;} "=" n=<ID> {sb.append(n.image);} ("." n=<ID> {sb.append("."); sb.append(n.image);})+ eos())
      | ((LOOKAHEAD(2) n=<ID> "." {sb.append(n.image); sb.append(".");})+ (n=<ID> | n="*") eos() {
           s = n.image; sb.append(s);
         }
        )
      ){ append(imports, new Tuple2<String, String>(s, new String(sb))); }
    )*
  "}"{ return new AST.ImportClause(p(t), toList(imports)); }
}

AST.Toplevel top_level():{int mset = 0; AST.Toplevel top;}{
( LOOKAHEAD(2)
  top=statement()
| [mset=modifiers()]
  ( top=type_decl(mset)
  | top=fun_decl(mset)
  | top=var_decl(mset)
  )
) {return top;}
}

AST.GlobalVariableDeclaration var_decl(int modifiers) : {
  Token t1, t2;
  AST.TypeNode ty = null;
  AST.Expression e = null;
}{
  {enterSection();}
  t1="var" t2=<FID> [":" ty=type()] ["=" e=term()] eos() {
    return new AST.GlobalVariableDeclaration(
      p(t1), modifiers, t2.image.substring(1), ty, e
    );
  }
}

AST.FunctionDeclaration fun_decl(int modifiers) : {
  Token t1, t2;
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  AST.TypeNode ty = null;
  AST.BlockExpression b = null;
  AST.Expression e = null;
}{
  {enterSection();}
  t1="def" t2=<ID> ["(" args=args() ")"] [":" ty=return_type()]
  (  (b=block() {leaveSection();} | eos()) {
       return new AST.FunctionDeclaration(p(t1), modifiers, t2.image, args, ty, b);
     }
  |  ("=" eols() e=term() eos()) {
       return new AST.FunctionDeclaration(
         p(t1), modifiers, t1.image, args, ty,
         new AST.BlockExpression(p(t1), asList(new AST.ReturnExpression(p(t1), e)))
       );
     }
  )
}

AST.TypeDeclaration type_decl(int modifiers) :{AST.TypeDeclaration ty = null;}{
  (ty=interface_decl(modifiers) | ty=class_decl(modifiers) | ty=record_decl(modifiers)) {return ty;}
}

AST.BlockExpression block():{Token t; List<AST.CompoundExpression> statements = (List<AST.CompoundExpression>)AST.NIL(); AST.BlockExpression s;}{
  t="{" [statements=statements()] "}" {return new AST.BlockExpression(p(t), statements);}
}

List<AST.CompoundExpression> statements():{ AST.CompoundExpression s; ArrayBuffer<AST.CompoundExpression> statements = new ArrayBuffer<AST.CompoundExpression>(); }{
  (s=statement() { append(statements, s); })+ {return toList(statements);}
}

int modifiers():{ mset = 0; Token t = null, last = null; }{
  ( t = "final"        {mset = AST.M_FINAL();}
  | t = "internal"     {mset = AST.M_INTERNAL();}
  | t = "volatile"     {mset = AST.M_VOLATILE();}
  | t = "abstract"     {mset = AST.M_ABSTRACT();}
  | t = "synchronized" {mset = AST.M_SYNCHRONIZED();}
  | t = "static"       {mset = AST.M_STATIC();}
  | t = "override"    {mset = AST.M_OVERRIDE();}
  )
  ( LOOKAHEAD(1,{no(AST.M_FINAL(), mset)})        t = "final"        { mset |= AST.M_FINAL(); }
  | LOOKAHEAD(1,{no(AST.M_INTERNAL(), mset)})     t = "internal"     { mset |= AST.M_INTERNAL(); }
  | LOOKAHEAD(1,{no(AST.M_VOLATILE(), mset)})     t = "volatile"     { mset |= AST.M_VOLATILE(); }
  | LOOKAHEAD(1,{no(AST.M_ABSTRACT(), mset)})     t = "abstract"     { mset |= AST.M_ABSTRACT(); }
  | LOOKAHEAD(1,{no(AST.M_SYNCHRONIZED(), mset)}) t = "synchronized" { mset |= AST.M_SYNCHRONIZED(); }
  | LOOKAHEAD(1,{no(AST.M_STATIC(), mset)})       t = "static"       { mset |= AST.M_STATIC(); }
  | LOOKAHEAD(1,{no(AST.M_OVERRIDE(), mset)})    t = "override"    { mset |= AST.M_OVERRIDE(); }
  )* {return mset;}
}

AST.AccessSection default_section() : {
  ArrayBuffer<AST.MemberDeclaration> members = new ArrayBuffer<AST.MemberDeclaration>();
  AST.MemberDeclaration m; int mset; Location location;
}{
  {mset = 0;}
  ([mset=modifiers()] m=member_decl(mset) {
     append(members, m); location = m.location();
   }
  )
  {mset = 0;}
  ([mset=modifiers()] m=member_decl(mset) {append(members, m);})*
  {return new AST.AccessSection(location, AST.M_PRIVATE(), toList(members));}
}

AST.AccessSection access_section() :{
  ArrayBuffer<AST.MemberDeclaration> members = new ArrayBuffer<AST.MemberDeclaration>();
  Token t; int mset; AST.MemberDeclaration m;
  int sectionType = 0;
}{
  (t="public"    {sectionType = AST.M_PUBLIC();}
  |t="protected" {sectionType = AST.M_PROTECTED();}
  |t="private"   {sectionType = AST.M_PRIVATE();}
  ) ":"
  {mset = 0;}
  ([mset=modifiers()] m=member_decl(mset) {append(members, m);})*
  {return new AST.AccessSection(p(t), sectionType, toList(members));}
}

AST.MemberDeclaration member_decl(int mset) :{AST.MemberDeclaration m;}{
  LOOKAHEAD(2) m=field_decl(mset)         {return m;}
| LOOKAHEAD(2) m=method_decl(mset)        {return m;}
| LOOKAHEAD(2) m=delegate_decl(mset)      {return m;}
| LOOKAHEAD(2) m=constructor_decl(mset)   {return m;}
}

AST.ClassDeclaration class_decl(int mset) : {
  Token t1, t2; AST.TypeNode ty1 = null, ty2 = null;
  AST.AccessSection sec1 = null;
  AST.AccessSection sec2 = null;
  Option<AST.AccessSection> sec3 = null;
  ArrayBuffer<AST.TypeNode> ty2s = new ArrayBuffer<AST.TypeNode>();
  ArrayBuffer<AST.AccessSection> sec2s = new ArrayBuffer<AST.AccessSection>();
}{
  t1="class" t2=<ID> [":" ty1=class_type()]
  ["<:" ty2=class_type() {append(ty2s, ty2);} ("," ty2=class_type() {append(ty2s, ty2);})*] "{"
    [sec1=default_section()] { sec3 = option(sec1); }
    (sec2=access_section() {append(sec2s, sec2);})*
  "}" {
    return new AST.ClassDeclaration(
      p(t1), mset, t2.image, ty1, toList(ty2s), sec3, toList(sec2s)
    );
  }
}

AST.RecordDeclaration record_decl(int mset) : {
  Token t1, t2; List<AST.Argument> args;
}{
  t1="record" t2=<ID> "(" args=args() ")" {
    return new AST.RecordDeclaration(
      p(t1), mset, t2.image, args
    );
  }
}

AST.InterfaceDeclaration interface_decl(int mset) : {
  Token start, name;
  AST.TypeNode superType;
  AST.MethodDeclaration signature;
  ArrayBuffer<AST.TypeNode> superTypes = new ArrayBuffer<AST.TypeNode>();
  ArrayBuffer<AST.MethodDeclaration> signatures = new ArrayBuffer<AST.MethodDeclaration>();
}{
  start = "interface" name = <ID>
  [ "<:"
    superType = class_type() {append(superTypes, superType);}
    ("," superType = class_type() {append(superTypes, superType);})*
  ] "{"
    (signature = interface_method_decl() {append(signatures, signature); })*
  "}" {
    return new AST.InterfaceDeclaration(
      p(start), mset, name.image, toList(superTypes), toList(signatures)
    );
  }
}

AST.ConstructorDeclaration constructor_decl(int mset) : {
  Token t;
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  List<AST.Expression> params = (List<AST.Expression>)AST.NIL();
  AST.BlockExpression block;
}{
  "def" t="this" ["(" args = args() ")"] [":" "(" params = terms() ")"] block = block() {
    return new AST.ConstructorDeclaration(p(t), mset, args, params, block);
  }
}

AST.MethodDeclaration method_decl(int mset) : {
  Token t;
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  AST.TypeNode ty = null;
  AST.BlockExpression b = null;
  AST.Expression e = null;
}{
  "def" t=<ID> ["(" args=args() ")"] [":" ty=return_type()]
  (  (b=block() | {enterSection();} eos() ) {
       return new AST.MethodDeclaration(p(t), mset, t.image, args, ty, b);
     }
  |  ({enterSection();} "=" eols() e=term() eos()) {
       return new AST.MethodDeclaration(
         p(t), mset, t.image, args, ty,
         new AST.BlockExpression(p(t), asList(new AST.ReturnExpression(p(t), e)))
       );
     }
  )
}

AST.MethodDeclaration interface_method_decl() : {
  Token n;
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  AST.TypeNode ty  = null;
}{
  {enterSection();}
  "def" n=<ID> ["(" args=args() ")"] [":" ty=return_type()] eos() {
    return new AST.MethodDeclaration(p(n), AST.M_PUBLIC(), n.image, args, ty, null);
  }
}

AST.TypeNode basic_type() : {
  Token t = null; AST.PrimitiveTypeKind kind = null;
}{
( t=<K_BYTE>     {kind = AST.K_BYTE();}
| t=<K_SHORT>    {kind = AST.K_SHORT();}
| t=<K_CHAR>     {kind = AST.K_CHAR();}
| t=<K_INT>      {kind = AST.K_INT();}
| t=<K_LONG>     {kind = AST.K_LONG();}
| t=<K_FLOAT>    {kind = AST.K_FLOAT();}
| t=<K_DOUBLE>   {kind = AST.K_DOUBLE();}
| t=<K_BOOLEAN>  {kind = AST.K_BOOLEAN();}
) {return new AST.TypeNode(p(t), new AST.PrimitiveType(kind), false);}
}

AST.TypeNode class_type() : {Token n;}{
  n=<FQCN> {return new AST.TypeNode(p(n), new AST.ReferenceType(n.image, true), false);}
| n=<ID>   {return new AST.TypeNode(p(n), new AST.ReferenceType(n.image, false), false);}
}

AST.TypeNode raw_type() :{AST.TypeNode c;}{
  (c = basic_type() | c = class_type()) {return c;}
}

AST.TypeNode void_type() :{Token t;}{
  t=<K_VOID> {return new AST.TypeNode(p(t), new AST.PrimitiveType(AST.K_VOID()), false);}
}

AST.TypeNode type() : {
  int d = 0; ArrayBuffer<AST.TypeDescriptor> args = new ArrayBuffer<AST.TypeDescriptor>();
  AST.TypeNode arg, c;
  boolean isRelaxed = false;
}{
  ("+" {isRelaxed = true;})?
  c=raw_type()
  [LOOKAHEAD(2) "<" arg=type() {append(args, arg.desc());} ("," arg=type() {append(args, arg.desc());})* ">" ]
  (LOOKAHEAD(2) "[" "]" {d++;})* {
    AST.TypeDescriptor desc = args.size() > 0 ? new AST.ParameterizedType(c.desc(), toList(args)) : c.desc();
    for(int i = 0; i < d; i++) {
      desc = new AST.ArrayType(desc);
    }
    return new AST.TypeNode(c.location(), desc, isRelaxed);
  }
}

AST.TypeNode return_type() :{AST.TypeNode type;}{
  (type = void_type() | type = type()) {return type;}
}

AST.Argument argument() :{Token t; AST.TypeNode type;}{
  t=<ID> ":" type = type() {return new AST.Argument(p(t), t.image, type);}
}

List<AST.Argument> args() :{ArrayBuffer<AST.Argument> as = new ArrayBuffer<AST.Argument>(); AST.Argument a;}{
  [a = argument() {append(as, a);} ("," a = argument() {append(as, a);})*] {return toList(as);}
}

AST.DelegatedFieldDeclaration delegate_decl(int modifiers) : {
  Token start, name;
  AST.TypeNode type = null;
  AST.Expression init = null;
}{
  {enterSection();}
  start="forward" name=<FID> [":" type = type()]
  ["=" eols() init=term()] eos() {
    return new AST.DelegatedFieldDeclaration(p(start), modifiers, name.image.substring(1), type, init);
  }
}

AST.FieldDeclaration field_decl(int modifiers):{
  Token name;
  AST.TypeNode type = null;
  AST.Expression init = null;
}{
  {enterSection();}
  name=<FID> ":" [type=type()]
  ["=" eols() init=term()] eos() {
    return new AST.FieldDeclaration(p(name), modifiers, name.image.substring(1), type, init);
  }
}

AST.CompoundExpression statement():{AST.CompoundExpression s;}{
  LOOKAHEAD(2)
  s=local_var_statement()    {return s;}
| s=if_statement()           {return s;}
| s=while_statement()        {return s;}
| s=for_statement()          {return s;}
| s=select_statement()       {return s;}
| s=block()                  {return s;}
| s=try_statement()          {return s;}
| s=throw_statement()        {return s;}
| s=break_statement()        {return s;}
| s=continue_statement()     {return s;}
| s=return_statement()       {return s;}
| s=exp_statement()          {return s;}
| s=empty_statement()        {return s;}
| s=synchronized_statement() {return s;}
| s=foreach_statement()      {return s;}
}

// End of section
void eos() :{} {
  (";" | <EOL> | <EOF>) { leaveSection(); }
}

void eols() :{} {
  (<EOL>)*
}

AST.LocalVariableDeclaration local_var_statement() :{Token t; AST.TypeNode ty; AST.Expression e = null;}{
  {enterSection();}
  t=<ID>
  ":" ty=type() ["=" eols() e=term()] eos() {return new AST.LocalVariableDeclaration(p(t), t.image, ty, e);}
}

AST.BreakExpression break_statement() :{Token t;}{
  {enterSection();}
  t="break" eos() {return new AST.BreakExpression(p(t));}
}

AST.ContinueExpression continue_statement() :{Token t; AST.ContinueExpression st;}{
  {enterSection();}
  t="continue" eos() {return new AST.ContinueExpression(p(t));}
}

AST.ThrowExpression throw_statement() :{Token t; AST.Expression e;}{
  {enterSection();}
  t="throw" e=term() eos() {return new AST.ThrowExpression(p(t), e);}
}

AST.TryExpression try_statement() :{
  Token t; AST.Argument a; AST.BlockExpression b1, b2, b3 = null;
  ArrayBuffer<Tuple2<AST.Argument,AST.BlockExpression>> as = new ArrayBuffer<Tuple2<AST.Argument, AST.BlockExpression>>();
}{
  t="try"  b1=block() ("catch" a=argument() b2=block() {append(as, new Tuple2<AST.Argument, AST.BlockExpression>(a, b2));})*
  ["finally" b3=block()] {return new AST.TryExpression(p(t), b1, toList(as), b3);}
}

AST.ExpressionBox exp_statement() :{AST.Expression e;}{
  {enterSection();}
  e=term() eos() {return new AST.ExpressionBox(e.location(), e);}
}

AST.EmptyExpression empty_statement() :{Token t;}{
  t=";" {return new AST.EmptyExpression(p(t));}
}

AST.IfExpression if_statement() :{Token t; AST.Expression e; AST.BlockExpression b1, b2 = null;}{
  t="if" e=term() b1=block() [LOOKAHEAD(2) "else" b2=block()] {return new AST.IfExpression(p(t), e, b1, b2);}
}

AST.SelectExpression select_statement() :{
  Token t1, t2; AST.Expression e1, e2;
  ArrayBuffer<AST.Expression> es = new ArrayBuffer<AST.Expression>();
  List<AST.CompoundExpression> ss = null;
  ArrayBuffer<Tuple2<List<AST.Expression>, AST.BlockExpression>> branches = new ArrayBuffer<Tuple2<List<AST.Expression>, AST.BlockExpression>>();
  AST.BlockExpression elseBlock = null ;
}{
  t1="select" e1=term() "{"
    ((t2="case" e2=term() {append(es, e2);} ("," e2=term() {append(es, e2);})* ":" ss=statements()) {
      append(branches, new Tuple2<List<AST.Expression>, AST.BlockExpression>(toList(es), new AST.BlockExpression(p(t2), ss)));
    })*
    [t2="else" ":" [ss=statements()] { elseBlock = new AST.BlockExpression(p(t2), ss); }]
  "}" {
    return new AST.SelectExpression(p(t1), e1, toList(branches), elseBlock);
  }
}

AST.ReturnExpression return_statement() :{Token t; AST.Expression e = null;}{
  {enterSection();}
  t="return" [e=term()] eos() {return new AST.ReturnExpression(p(t), e);}
}

AST.SynchronizedExpression synchronized_statement() :{Token t; AST.Expression e = null; AST.BlockExpression b;}{
  t="synchronized" [e=term()] b=block() {return new AST.SynchronizedExpression(p(t), e, b);}
}

AST.WhileExpression while_statement() :{Token t; AST.Expression e; AST.BlockExpression b;}{
  t="while" e=term() b=block() {return new AST.WhileExpression(p(t), e, b);}
}

AST.ForeachExpression foreach_statement() :{Token t; AST.Argument a; AST.Expression e; AST.BlockExpression b;}{
  t="foreach" a=argument() (LOOKAHEAD({la("in")}) <ID>) e=term() b=block() {
    return new AST.ForeachExpression(p(t), a, e, b);
  }
}

AST.ForExpression for_statement() :{Token t; AST.CompoundExpression s; AST.Expression e1 = null, e2 = null; AST.BlockExpression b;}{
  t="for" (LOOKAHEAD(2) s=local_var_statement() | s=exp_statement() | s=empty_statement())
  [e1=term()] ";" [e2=term()] b=block() {
  	return new AST.ForExpression(p(t), s, e1, e2, b);
  }
}

AST.Expression term() :{AST.Expression e;}{
  e = assignable() { return e; }
}

AST.Expression assignable() :{Token t; AST.Expression a, b; }{
  a=logical_or()
  [ ( t="="  eols() b=assignable() {a = new AST.Assignment(p(t), a, b);}
    | t="+=" eols() b=assignable() {a = new AST.AdditionAssignment(p(t), a, b);}
    | t="-=" eols() b=assignable() {a = new AST.SubtractionAssignment(p(t), a, b);}
    | t="*=" eols() b=assignable() {a = new AST.MultiplicationAssignment(p(t), a, b);}
    | t="/=" eols() b=assignable() {a = new AST.DivisionAssignment(p(t), a, b);}
    | t="%=" eols() b=assignable() {a = new AST.ModuloAssignment(p(t), a, b);}
    )
  ]{return a;}
}

AST.Expression logical_or() :{Token t; AST.Expression a, b; }{
  a=logical_and()
  ( t="||" eols() b=logical_and() {a = new AST.LogicalOr(p(t), a, b);}
  | t="?:" eols() b=logical_and() {a = new AST.Elvis(p(t), a, b);})*
  { return a; }
}

AST.Expression logical_and() :{Token t; AST.Expression a, b; }{
  a=bit_or() (t="&&" eols() b=bit_or() {a = new AST.LogicalAnd(p(t), a, b);})* {return a;}
}

AST.Expression bit_or() :{Token t; AST.Expression a, b; }{
  a=xor() (t="|" eols() b=xor() {a = new AST.BitOr(p(t), a, b);})* {return a;}
}

AST.Expression xor() :{Token t; AST.Expression a, b;}{
  a = bit_and() (t="^" eols() b=bit_and() {a = new AST.XOR(p(t), a, b);})* {return a;}
}

AST.Expression bit_and() :{Token t; AST.Expression a, b; }{
  a=equal() (t = "&" eols() b=equal() {a = new AST.BitAnd(p(t), a, b);})* {return a;}
}

AST.Expression equal() :{ Token t; AST.Expression a, b; }{
  a=comparative()
  ( ( t="===" eols() b=comparative() {a= new AST.ReferenceEqual(p(t), a, b);}
    | t="!==" eols() b=comparative() {a= new AST.ReferenceNotEqual(p(t), a, b);}
    | t="=="  eols() b=comparative() {a= new AST.Equal(p(t), a, b);}
    | t="!="  eols() b=comparative() {a= new AST.NotEqual(p(t), a, b);}
    )
  )* {return a;}
}

AST.Expression comparative() : { Token t; AST.Expression a, b; AST.TypeNode type; }{
  a=bit_shift()
  ( ( t="<=" eols() b=bit_shift() {a = new AST.LessOrEqual(p(t), a, b);}
    | t=">=" eols() b=bit_shift() {a = new AST.GreaterOrEqual(p(t), a, b);}
    | t="<"  eols() b=bit_shift() {a = new AST.LessThan(p(t), a, b);}
    | t=">"  eols() b=bit_shift() {a = new AST.GreaterThan(p(t), a, b);}
    | t="is" eols() type = type() {a = new AST.IsInstance(p(t), a, type);}
    )
  )* {return a;}
}

AST.Expression bit_shift() :{Token t; AST.Expression e1, e2;}{
  e1=additive()
( t="<<" eols() e2=additive()    {e1 = new AST.MathLeftShift(p(t), e1, e2);}
| t=">>" eols() e2=additive()    {e1 = new AST.MathRightShift(p(t), e1, e2);}
| t=">>>"eols() e2=additive()    {e1 = new AST.LogicalRightShift(p(t), e1, e2);}
)* { return e1; }
}

AST.Expression additive() :{Token t; AST.Expression e1, e2;}{
  e1=unary_prefix()
( t="+" eols() e2=unary_prefix() {e1 = new AST.Addition(p(t), e1, e2);}
| t="-" eols() e2=unary_prefix() {e1 = new AST.Subtraction(p(t), e1, e2);}
)* {return e1;}
}

AST.Expression unary_prefix() :{Token t; AST.Expression e;}{
( t="+" e=unary_prefix() {e = new AST.Posit(p(t), e);}
| t="-" e=unary_prefix() {e = new AST.Negate(p(t), e);}
| t="!" e=unary_prefix() {e = new AST.Not(p(t), e);}
| e=multitive()
) {return e;}
}

AST.Expression multitive() :{Token t; AST.Expression e1, e2;}{
  e1=primary_suffix()
( t="*" eols() e2=primary_suffix()  {e1 = new AST.Multiplication(p(t), e1, e2);}
| t="/" eols() e2=primary_suffix()  {e1 = new AST.Division(p(t), e1, e2);}
| t="%" eols() e2=primary_suffix()  {e1 = new AST.Modulo(p(t), e1, e2);}
)* {return e1;}
}

AST.Expression primary_suffix() : {
  Token t, n; AST.Expression e, a = null; List<AST.Expression> args = (List<AST.Expression>)AST.NIL();
  AST.TypeNode type;
}{
  e=primary()
( t="[" eols() a=term() eols() "]"                                                              {e = new AST.Indexing(p(t), e, a);}
| t="." eols() n=<ID> (LOOKAHEAD(1) "(" eols() args=terms() ")" [a=anonymous_function()] {e = new AST.MethodCall(p(t), e, c(n), a != null ? args.reverse().$colon$colon(a).reverse() : args);} | {e = new AST.MemberSelection(p(t), e, c(n));})
| t="$" eols() type=type()                                                                      {e = new AST.Cast(p(t), e, type);}
| t="++"                                                                                        {e = new AST.PostIncrement(p(t), e);}
| t="--"                                                                                        {e = new AST.PostDecrement(p(t), e);}
)* {return e;}
}

AST.Expression primary() : {
  Token n = null, t; AST.TypeNode ty = null; AST.Expression e;
  List<AST.Expression> es = (List<AST.Expression>)AST.NIL();
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  AST.BlockExpression body;
}{
  t=<FID>                                                           {return new AST.UnqualifiedFieldReference(p(t), c(t).substring(1));}
| t="super" eols() "." eols() n=<ID> ["(" es=terms() ")"]           {return new AST.SuperMethodCall(p(t), c(n), es);}
| LOOKAHEAD(4) ty=class_type() t="::" n=<ID> "(" es=terms()  ")"    {return new AST.StaticMethodCall(p(t), ty, c(n), es);}
| LOOKAHEAD(2) ty=class_type() t="::" n=<ID>                        {return new AST.StaticMemberSelection(p(t), ty, c(n));}
| LOOKAHEAD(2) t=<ID> "(" es=terms() ")"                            {return new AST.UnqualifiedMethodCall(p(t), c(t), es);}
| t=<ID>                                                            {return new AST.Id(p(t), c(t));}
| {enterDefault();} t="[" eols() es=terms() "]" {leaveDefault();}   {return new AST.ListLiteral(p(t), es);}
| e=anonymous_function()                                            {return e;}
| t="new" ty=type() (
    "[" eols() (es=terms()) "]"                                           {return new AST.NewArray(p(t), ty, es);}
  | ["(" eols() (es=terms()) ")"]                                         {return new AST.NewObject(p(t), ty, es);}
  )
| t="self"                                                                {return new AST.CurrentInstance(p(t));}
| e=integer_literal()                                                     {return e;}
| e=float_literal()                                                       {return e;}
| e=char_literal()                                                        {return e;}
| e=string_literal()                                                      {return e;}
| e=boolean_literal()                                                     {return e;}
| e=null_literal()                                                        {return e;}
| "(" eols() e=term() eols() ")"                                          {return e;}
}

List<AST.Expression> terms() :{AST.Expression arg; ArrayBuffer<AST.Expression> args = new ArrayBuffer<AST.Expression>();}{
  [arg=term() {append(args, arg);} ("," arg=term() {append(args, arg);})*] {
    return toList(args);
  }
}

AST.ClosureExpression anonymous_function() :{
  Token n = null, t; AST.TypeNode ty = null; AST.Expression e;
  List<AST.Argument> args = (List<AST.Argument>)AST.NIL();
  AST.BlockExpression body;
}{
  {enterDefault();}
  t="#" [ ty=class_type() "." n=<ID>] ["(" args=args() ")"] body=block() {
    String mname;
    if(ty == null) {
      ty = new AST.TypeNode(p(t), new AST.ReferenceType("onion.Function" + args.size(), true), true);
      mname = "call";
    }else {
      mname = n.image;
    }
    leaveDefault();
    return new AST.ClosureExpression(p(t), ty, mname, args, null, body);
  }
}

AST.Expression null_literal() :{Token t;}{
  t="null" {return new AST.NullLiteral(p(t));}
}

AST.Expression integer_literal() :{Token t; String s;}{
  t=<INTEGER> {
    s = t.image;
    if(s.endsWith("L")){
      String content = chop(s);
      long value;
      if(content.matches("0[xX].*")) {
        value = Long.parseLong(content.substring(2), 16);
      } else {
        value = Long.parseLong(content);
      }
      return new AST.LongLiteral(p(t), Long.parseLong(chop(s)));
    }else{
      String content = s;
      int value;
      if(content.matches("0[xX].*")) {
        value = Integer.parseInt(content.substring(2), 16);
      } else {
        value = Integer.parseInt(content);
      }
      return new AST.IntegerLiteral(p(t), value);
    }
  }
}

AST.Expression float_literal() :{Token t; String s;}{
  t=<FLOAT> {
  	s = t.image;
    if(s.endsWith("F")){
      return new AST.FloatLiteral(p(t), Float.parseFloat(chop(s)));
    }else if(s.endsWith("D")){
      return new AST.DoubleLiteral(p(t), Double.parseDouble(chop(s)));
    }else{
      return new AST.DoubleLiteral(p(t), Double.parseDouble(s));
    }
  }
}

AST.Expression boolean_literal() :{Token t;}{
  t="true"  {return new AST.BooleanLiteral(p(t), true);}
| t="false" {return new AST.BooleanLiteral(p(t), false);}
}

AST.Expression string_literal() :{Token t; AST.Expression e;}{
  t=<STRING> {
    String str = t.image;
    if (str.contains("#{")) {
      return parseInterpolatedString(p(t), str);
    } else {
      return new AST.StringLiteral(p(t), unescape(chopEdge(str)));
    }
  }
}

AST.CharacterLiteral char_literal() :{Token t;}{
  t=<CHARACTER> {return new AST.CharacterLiteral(p(t), unescape(chopEdge(t.image)).charAt(0));}
}
